library(devtools)
install_github("dataquality", username="mtennekes", subdir="pkg")
install_github("dataquality", username="mtennekes", subdir="pkg")
library(devtools)
install_github("dataquality", username="mtennekes", subdir="pkg")
library(devtools)
install_github("dataquality", username="mtennekes", subdir="pkg")
library(devtools)
install_github("dataquality", username="mtennekes", subdir="pkg")
library(devtools)
install_github("dataquality", username="mtennekes", subdir="pkg")
install_github("dataquality", username="mtennekes", subdir="pkg")
install_github("dataquality", username="mtennekes", subdir="pkg")
library(devtools)
install_github("dataquality", username="mtennekes", subdir="pkg")
install_github("dataquality", username="mtennekes", subdir="pkg")
install.packages("httr")
library(devtools)
library(httr)
install.packages("httr")
install_github("dataquality", username="mtennekes", subdir="pkg")
install_github("CANVAS")
library(devtools)
install_github("CANVAS")
set_config(use_prox(url="proxy.qualco.int",port=8080,username="ntzortzis",password="nt123456"))
install.packages("httr")
install.packages("httr")
set_config(use_prox(url="proxy.qualco.int",port=8080,username="ntzortzis",password="nt123456"))
library(devtools)
library(httr)
set_config(use_prox(url="proxy.qualco.int",port=8080,username="ntzortzis",password="nt123456"))
http_proxy="http://ntzortzis:nt123456@proxy.qualco.int:8080/"
Sys.setenv(http_proxy="http://ntzortzis:nt123456@proxy.qualco.int:8080")
set_config(use_prox(url="proxy.qualco.int",port=8080,username="ntzortzis",password="nt123456"))
library(devtools)
library(httr)
install.packages("httr")
install.packages("httr")
install_github("CANVAS")
library(devtools)
install_github("CANVAS")
install_github("dataquality", username="mtennekes", subdir="pkg")
Sys.setenv(http_proxy="http://ntzortzis:nt123456@proxy.qualco.int:8080")
install_github("CANVAS")
set_config(use_proxy(url="proxy.qualco.int",port=8080,username="ntzortzis",password="nt123456"))
install.packages("devtools")
require(devtools)
install.packages("devtools")
set_config(use_proxy(url="proxy.qualco.int",port=8080,username="ntzortzis",password="nt123456"))
require(httr)
set_config(use_proxy(url="proxy.qualco.int",port=8080,username="ntzortzis",password="nt123456"))
install_github("dataquality", username="mtennekes", subdir="pkg")
install.packages("devtools")
install_github("dataquality", username="mtennekes", subdir="pkg")
require(devtools)
set_config(use_proxy(url="proxy.qualco.int",port=8080,username="ntzortzis",password="nt123456"))
install_github("dataquality", username="mtennekes", subdir="pkg")
set_config(use_proxy(url="http://proxy.qualco.int",port=8080,username="ntzortzis",password="nt123456"))
install_github("dataquality", username="mtennekes", subdir="pkg")
install_github("dataquality", username="mtennekes", subdir="pkg")
set_config(use_proxy(url="https://proxy.qualco.int",port=8080,username="ntzortzis",password="nt123456"))
install_github("dataquality", username="mtennekes", subdir="pkg")
set_config(use_proxy(url="https://proxy.qualco.int",port=8080))
install_github("dataquality", username="mtennekes", subdir="pkg")
install_github("dataquality", username="mtennekes", subdir="pkg")
install_github("dataquality", username="mtennekes", subdir="pkg")
set_config(use_proxy(url="https://proxy.qualco.int",port=8080))
install_github("dataquality", username="mtennekes", subdir="pkg")
set_config(use_proxy(url="http://proxy.qualco.int",port=8080,username="ntzortzis",password="nt123456"))
install_github("dataquality", username="mtennekes", subdir="pkg")
install_github("dataquality", username="mtennekes", subdir="pkg")
install_github("dataquality", username="mtennekes", subdir="pkg")
Sys.setenv(http_proxy="http://ntzortzis:nt123456@proxy.qualco.int:8080")
library(devtools)
install_github("dataquality", username="mtennekes", subdir="pkg")
Sys.setenv(http_proxy="http://ntzortzis:nt123456@proxy.qualco.int:/8080")
Sys.setenv(http_proxy="http://ntzortzis:nt123456@proxy.qualco.int:8080/")
install_github("dataquality", username="mtennekes", subdir="pkg")
library(devtools)
install_github("dataquality", username="mtennekes", subdir="pkg")
Sys.setenv(http_proxy="http://ntzortzis:nt123456@proxy.qualco.int:8080/")
install_github("dataquality", username="mtennekes", subdir="pkg")
Sys.setenv(https_proxy="https://ntzortzis:nt123456@proxy.qualco.int:8080/")
install_github("dataquality", username="mtennekes", subdir="pkg")
Sys.setenv(https_proxy="http://ntzortzis:nt123456@proxy.qualco.int:8080/")
install_github("dataquality", username="mtennekes", subdir="pkg")
SetInternet2(TRUE)
install_github("dataquality", username="mtennekes", subdir="pkg")
library(devtools)
require(devtools)
require(httr)
install_github("dataquality", username="mtennekes", subdir="pkg")
install_github("dataquality", username="mtennekes", subdir="pkg")
install_github("dataquality", username="mtennekes", subdir="pkg")
install_github("dataquality", username="mtennekes", subdir="pkg")
install_github("dataquality", username="mtennekes", subdir="pkg")
library(devtools)
install_github("dataquality", username="mtennekes", subdir="pkg")
read.table.ffdf(file="/directory/myfile.csv",FUN="read.table",header=FALSE,sep=",",colClasses=c("factor",rep("integer",139351)),first.rows=100, next.rows=100,VERBOSE=TRUE)
library("ff", lib.loc="C:/Users/ntzortzis/Documents/R/win-library/3.0")
library("ffbase", lib.loc="C:/Users/ntzortzis/Documents/R/win-library/3.0")
read.table.ffdf(file="/directory/myfile.csv",FUN="read.table",header=FALSE,sep=",",colClasses=c("factor",rep("integer",139351)),first.rows=100, next.rows=100,VERBOSE=TRUE)
read.table.ffdf(file="/directory/myfile.csv",FUN="read.table",header=FALSE,sep="|",VERBOSE=TRUE)
read.table.ffdf(file="/directory/BT_PMS_XPRT_PROMISE_LEAF_20140410.csv",FUN="read.table",header=FALSE,sep="|",VERBOSE=TRUE)
read.table.ffdf(file="C:/BT_PMS_XPRT_PROMISE_LEAF_20140410.csv",FUN="read.table",header=FALSE,sep="|",VERBOSE=TRUE)
data<-read.table.ffdf(file="C:/BT_PMS_XPRT_PROMISE_LEAF_20140410.csv",FUN="read.table",header=T,sep="|",VERBOSE=TRUE)
library("dataQualityR", lib.loc="C:/Users/ntzortzis/Documents/R/win-library/3.0")
num.file <- paste(tempdir(), "C:/dq_num.csv", sep= "")
cat.file <- paste(tempdir(), "C:/dq_cat.csv", sep= "")
checkDataQuality(data= data, out.file.num= num.file, out.file.cat= cat.file)
library("ff", lib.loc="C:/Users/ntzortzis/Documents/R/win-library/3.0")
library("ffbase", lib.loc="C:/Users/ntzortzis/Documents/R/win-library/3.0")
summary(data)
view(data)
data
y<-lm(data.fspr_amt_bdt~data.fspr_amt_pmt)
y<-lm(fspr_amt_bdt~fspr_amt_pmt)
y<-lm(data$fspr_amt_bdt~data$fspr_amt_pmt)
y<-lm(data$fspr_amt_dbt~data$fspr_amt_pmt)
y<-lm(data$fspr_amt_dbt~data$fspr_amt_pmt)
y<-lm(data$fspr_amt_dbt~data$fspr_amt_pmt)
y<-data$fspr_amt_dbt
y
y<-data$fspr_amt_pmt
y
y<-data$BCK_BC_ID
Y
y
y<-lm(data$fspr_amt_dbt~data$fspr_amt_pmt)
y<-lm(data$fspr_amt_dbt~data$fspr_amt_pmt)
data1<-data
bigglm.ffdf(data)
install.packages(c("evaluate", "memoise", "reshape2", "RJSONIO", "scales"))
install.packages("C:/Users/ntzortzis/Downloads/biglm_0.9-1.tar.gz", repos = NULL, type = "source")
a <- bigglm(data$fspr_amt_dbt~data$fspr_amt_pmt,data=data1, chunksize=10, sandwich=TRUE)
require(ffbase)
a <- bigglm(data$fspr_amt_dbt~data$fspr_amt_pmt,data=data1, chunksize=10, sandwich=TRUE)
?bigglm
?biglm
??bigglm
a <- bigglm(data$fspr_amt_dbt~data$fspr_amt_pmt,data=data1, chunksize=10, sandwich=TRUE)
a <- bigglm(data$fspr_amt_dbt~data$fspr_amt_pmt,data=data1, chunksize=10, sandwich=TRUE)
a <- bigglm(data$fspr_amt_dbt~data$fspr_amt_pmt,data=data1, chunksize=10, sandwich=TRUE)
require(ffbase)
require(biglm)
a <- bigglm(data$fspr_amt_dbt~data$fspr_amt_pmt,data=data1, chunksize=10, sandwich=TRUE)
a <- bigglm.ffdf(data$fspr_amt_dbt~data$fspr_amt_pmt,data=data1, chunksize=10, sandwich=TRUE)
install.packages("C:/Users/ntzortzis/Downloads/biglm_0.9-1 (1).tar.gz", repos = NULL, type = "source")
summary(data$fspr_amt_dbt)
require(biglm)
data(trees)
x <- as.ffdf(trees)
a <- bigglm(log(Volume)~log(Girth)+log(Height),
data=x, chunksize=10, sandwich=TRUE)
require(bigglm)
install.packages("C:/Users/ntzortzis/Downloads/DBI_0.2-7.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/ntzortzis/Downloads/biglm_0.9-1 (1).tar.gz", repos = NULL, type = "source")
a <- bigglm(data$fspr_amt_dbt~data$fspr_amt_pmt,data=data1, chunksize=10, sandwich=TRUE)
a <- biglm(data1$fspr_amt_dbt~data1$fspr_amt_pmt,data=data1, chunksize=10, sandwich=TRUE)
require(bigglm)
library("biglm", lib.loc="C:/Users/ntzortzis/Documents/R/win-library/3.0")
a <- biglm(data1$fspr_amt_dbt~data1$fspr_amt_pmt,data=data1, chunksize=10, sandwich=TRUE)
a <- biglm(data1$fspr_amt_dbt~data1$fspr_amt_pmt,data=data1, chunksize=10, sandwich=TRUE)
a <- biglm(data1$fspr_amt_dbt~data1$fspr_amt_pmt,data=data1, chunksize=10, sandwich=TRUE)
a <- biglm(data1$fspr_amt_dbt~data1$fspr_amt_pmt)
a <- biglm(data1$fspr_amt_dbt~data1$fspr_amt_pmt,data=data1)
a <- biglm(data$fspr_amt_dbt~data$fspr_amt_pmt,data=data)
a <- biglm(data$fspr_amt_dbt~data$fspr_amt_pmt,data=data)
R1=170000/670000
R2=300000/670000
R3=60000/670000
R4=380000/240000
R5=1300000/670000
Z=1.2*R1+1.4*R2+3.3*R3+0.6*R4+0.999*R5
Z
K=RNORM(1,3)
K=QNORM(1,3)
?NORM
??NORM
?QNORM
?QQNORM
rnorm(1,3)
rnorm(0.975,1,3)
qnorm(0.975,1,3)
install.packages("shiny")
install.packages("shiny")
library("shiny")
load("C:/Users/ntzortzis/Desktop/machine.data")
load("C:/Users/ntzortzis/Desktop/machinedata.csv")
mydata <- read.table("c:/machinedata.csv", header=TRUE, sep=",")
View(mydata)
mydata<-computer_hardware
computer_hardware<-mydata
View(computer_hardware)
rename(computer_hardware,c('X125'='MYCT','X256'='MMIN','X6000'='MMAX','X256.1'='CACH','X16'='CHMIN','X198'='CHMAX','X199'='PRP'))
install.packages("C:/Users/ntzortzis/Downloads/plyr_1.8.1.zip", repos = NULL)
library("plyr", lib.loc="C:/Users/ntzortzis/Documents/R/win-library/3.1")
install.packages("C:/Users/ntzortzis/Downloads/Rcpp_0.11.2.zip", repos = NULL)
library("Rcpp", lib.loc="C:/Users/ntzortzis/Documents/R/win-library/3.1")
library("plyr", lib.loc="C:/Users/ntzortzis/Documents/R/win-library/3.1")
rename(computer_hardware,c('X125'='MYCT','X256'='MMIN','X6000'='MMAX','X256.1'='CACH','X16'='CHMIN','X198'='CHMAX','X199'='PRP'))
rename(computer_hardware,c('X128'='CHMIN'))
rename(computer_hardware,c('X128'='CHMIN'))
View(computer_hardware)
View(computer_hardware)
names(computer_hardware)[names(computer_hardware)=="X125"] <- "MYCT"
View(computer_hardware)
names(computer_hardware)[names(computer_hardware)=="X256"] <- "MMIN"
names(computer_hardware)[names(computer_hardware)=="X6000"] <- "MMAX"
names(computer_hardware)[names(computer_hardware)=="X256.1"] <- "CACH"
names(computer_hardware)[names(computer_hardware)=="X16"] <- "CHMIN"
names(computer_hardware)[names(computer_hardware)=="X128"] <- "CHMAX"
names(computer_hardware)[names(computer_hardware)=="X198"] <- "PRP"
names(computer_hardware)[names(computer_hardware)=="X199"] <- "ERP"
View(computer_hardware)
names(computer_hardware)[names(computer_hardware)=="adviser"] <- "Vendor Name"
names(computer_hardware)[names(computer_hardware)=="X32.60"] <- "Model Name"
View(computer_hardware)
summary(computer_hardware)
summary_c_h<-summary(computer_hardware)
plot(computer_hardware$MYCT~computer_hardware$CACH)
plot(computer_hardware$CACH~computer_hardware$MYCT)
plot_c_h<-plot(computer_hardware$MYCT~computer_hardware$CACH)
plot_c_h<-plot(computer_hardware$MYCT~computer_hardware$CACH,ylim=range[0:500])
plot_c_h<-plot(computer_hardware$MYCT~computer_hardware$CACH,ylim=range(0:500)
plot_c_h<-plot(computer_hardware$MYCT~computer_hardware$CACH,ylim=range(0:500))
title(sub="Scatterplot")
computer_hardware1<-computer_hardware(c(3,4,5,6,7,8,9))
computer_hardware1<-computer_hardware(c("MYCT","MMIN","MMAX","CACH","CHMIN","CHMAX","PRP"))
computer_hardware1<-computer_hardware[,c("MYCT","MMIN","MMAX","CACH","CHMIN","CHMAX","PRP")]
View(computer_hardware1)
computer_hardware<-computer_hardware[,c("MYCT","MMIN","MMAX","CACH","CHMIN","CHMAX","PRP")]
?TITLE
?title
title(main="MYCT over CACH")
?PLOT
?port
?plot
plot1<-plot(MYCT~CACH,main="MYCT~CACH",xlab="CACH",ylab="MYCT",col="green")
attach(computer_hardware)
plot1<-plot(MYCT~CACH,main="MYCT~CACH",xlab="CACH",ylab="MYCT",col="green")
plot1<-plot(MYCT~CACH,main="MYCT~CACH",xlab="CACH",ylab="MYCT",col="forestgreen")
plot1<-plot(MYCT~CACH,main="MYCT~CACH",xlab="CACH",ylab="MYCT",col=ifelse(MYCT>500,"forestgreen","red")
plot1<-plot(MYCT~CACH,main="MYCT~CACH",xlab="CACH",ylab="MYCT",col=ifelse(MYCT>500,"forestgreen","red"))
plot1<-plot(MYCT~CACH,main="MYCT~CACH",xlab="CACH",ylab="MYCT",col=ifelse(MYCT>2*CACH,"red","forestgreen",pch=ifelse(MYCT>2*CACH,25,1))
plot1<-plot(MYCT~CACH,main="MYCT~CACH",xlab="CACH",ylab="MYCT",col=ifelse(MYCT>2*CACH,"red","forestgreen",pch=ifelse(MYCT>2*CACH,25,1)))
plot1<-plot(MYCT~CACH,main="MYCT~CACH",xlab="CACH",ylab="MYCT",col=ifelse(MYCT>2*CACH,"red","forestgreen"),pch=ifelse(MYCT>2*CACH,25,1))
hist1<-hist(MYCT)
hist1<-hist(MYCT,lwd=100)
hist1<-hist(MYCT,wd=100)
hist1<-hist(MYCT,lENGTH=100)
hist1<-hist(MYCT,length=100)
?hist
hist1<-hist(MYCT,breaks=c(100,100,100,100,100,100,100,100))
hist1<-hist(MYCT,breaks=c(100))
table(CHMIN)
?table
?pie
pnorm(-d2)
d2=d1-sigmaV*sqrt(T)
# We start by defining the quantities whose value is known.
S0=11; # Equity at time 0, i.e. today.
sigmaS=0.7; # Instantaneous volatility of equity
r=0.06; # Risk-free rate on the market
T=1; # Maturity
B=18; # Face value of debt obligation, i.e. liabilities.
# We then need to write down the function we will minimize in order to obtain
# V0, the value of company’s assets today, and sigmaV, assets’ volatility
# To write a function in R, we use the command “function”. Refer to the R intro
# for more details.
Merton_solve=function(parm){
V0=parm[1] #initial value for V0
sigmaV=parm[2] #initial value for sigmaV
# And now, all the quantities we have seen in the slides.
d1=(log(V0/B)+(r+sigmaV^2/2)*T)/(sigmaV*sqrt(T))
d2=d1-sigmaV*sqrt(T)
F=V0*pnorm(d1)-B*exp(-r*T)*pnorm(d2)-S0
G=pnorm(d1)*sigmaV*V0-sigmaS*S0
#  Finally the result of our function:
return(F^2+G^2)
}
# For the minimization step, in order to find V_0 and sigma_V,
# we need to specify two initial values.
# Let us choose V_0=13, and sigmaV=0.5.
# Other plausible values can obviously be chosen.
solutions=optim(c(V0=13,sigmaV=0.5),Merton_solve)
# What are the estimated values?
V0=solutions$par[1]
sigmaV=solutions$par[2]
# Let us compute d1 and d2 explicitly:
d1=(log(V0/B)+(r+sigmaV^2/2)*T)/(sigmaV*sqrt(T))
d2=d1-sigmaV*sqrt(T)
# And finally the probability of default in one year for our company
pnorm(-d2)
# We start by defining the quantities whose value is known.
S0=11; # Equity at time 0, i.e. today.
sigmaS=0.7; # Instantaneous volatility of equity
r=0.06; # Risk-free rate on the market
T=1; # Maturity
B=15; # Face value of debt obligation, i.e. liabilities.
# We then need to write down the function we will minimize in order to obtain
# V0, the value of company’s assets today, and sigmaV, assets’ volatility
# To write a function in R, we use the command “function”. Refer to the R intro
# for more details.
Merton_solve=function(parm){
V0=parm[1] #initial value for V0
sigmaV=parm[2] #initial value for sigmaV
# And now, all the quantities we have seen in the slides.
d1=(log(V0/B)+(r+sigmaV^2/2)*T)/(sigmaV*sqrt(T))
d2=d1-sigmaV*sqrt(T)
F=V0*pnorm(d1)-B*exp(-r*T)*pnorm(d2)-S0
G=pnorm(d1)*sigmaV*V0-sigmaS*S0
#  Finally the result of our function:
return(F^2+G^2)
}
# For the minimization step, in order to find V_0 and sigma_V,
# we need to specify two initial values.
# Let us choose V_0=13, and sigmaV=0.5.
# Other plausible values can obviously be chosen.
solutions=optim(c(V0=13,sigmaV=0.5),Merton_solve)
# What are the estimated values?
V0=solutions$par[1]
sigmaV=solutions$par[2]
# Let us compute d1 and d2 explicitly:
d1=(log(V0/B)+(r+sigmaV^2/2)*T)/(sigmaV*sqrt(T))
d2=d1-sigmaV*sqrt(T)
# And finally the probability of default in one year for our company
pnorm(-d2)
Merton_solve=function(parm){
V0=parm[1] #initial value for V0
sigmaV=parm[2] #initial value for sigmaV
# And now, all the quantities we have seen in the slides.
d1=(log(V0/B)+(r+sigmaV^2/2)*T)/(sigmaV*sqrt(T))
d2=d1-sigmaV*sqrt(T)
F=V0*pnorm(d1)-B*exp(-r*T)*pnorm(d2)-S0
G=pnorm(d1)*sigmaV*V0-sigmaS*S0
#  Finally the result of our function:
return(F^2+G^2)
}
qnorm(0.02)
qnorm(0.02)+0.3
-1.753749*0.3
0.06-0.09
/2
-0.03/2
-0.5261247+0.015
e^(-0.5111247)
exp(-0.5111247)
15*0.5998206
pnorm(4)
pnorm(1)
pnorm(0.1)
pnorm(0.001)
pnorm(0.0001)
pnorm(0.0000001)
pnorm(1.66)
pnorm(-1.66)
pnorm(-2)
pnorm(-2.053)
pnorm(-2.053749)
2.053749+0.3
2.353749*0.3
0.06-0.09
/2
0.7061247-0.015
exp(0.6911247)
1.995959*15
V0=29.93939
sigmaV=0.03
F=V0*pnorm(d1)-B*exp(-r*T)*pnorm(d2)-S0
d1=(log(V0/B)+(r+sigmaV^2/2)*T)/(sigmaV*sqrt(T))
d2=d1-sigmaV*sqrt(T)
d1=(log(V0/B)+(r+sigmaV^2/2)*T)/(sigmaV*sqrt(T))
d1<-(log(V0/B)+(r+sigmaV^2/2)*T)/(sigmaV*sqrt(T))
d1=(log(V0/B)+(r+sigmaV^2/2)*T)/(sigmaV*sqrt(T))
d2=d1-sigmaV*sqrt(T)
Merton_solve(29.39,0.03)
Merton_solve=function(parm){
V0=parm[1] #initial value for V0
sigmaV=parm[2] #initial value for sigmaV
# And now, all the quantities we have seen in the slides.
d1=(log(V0/B)+(r+sigmaV^2/2)*T)/(sigmaV*sqrt(T))
d2=d1-sigmaV*sqrt(T)
F=V0*pnorm(d1)-B*exp(-r*T)*pnorm(d2)-S0
G=pnorm(d1)*sigmaV*V0-sigmaS*S0
#  Finally the result of our function:
return(F^2+G^2)
}
Merton_solve(29.39,0.03)
Merton_solve(29.39)
Merton_solve(c(29.39,0.03)
Merton_solve(c(29.39,0.03))
V0=29.93939
sigmaV=0.3
d1=(log(V0/B)+(r+sigmaV^2/2)*T)/(sigmaV*sqrt(T))
B=15
T=1
d1=(log(V0/B)+(r+sigmaV^2/2)*T)/(sigmaV*sqrt(T))
r=0.06
d1=(log(V0/B)+(r+sigmaV^2/2)*T)/(sigmaV*sqrt(T))
d2=d1-sigmaV*sqrt(T)
pnorm(-d2)
qnorm(0.02)
solutions=optim(c(V0=13,sigmaV=0.5),Merton_solve)
# What are the estimated values?
V0=solutions$par[1]
S0=11; # Equity at time 0, i.e. today.
sigmaS=0.3; # Instantaneous volatility of equity
solutions=optim(c(V0=13,sigmaV=0.5),Merton_solve)
# What are the estimated values?
V0=solutions$par[1]
sigmaV=solutions$par[2]
# Let us compute d1 and d2 explicitly:
d1=(log(V0/B)+(r+sigmaV^2/2)*T)/(sigmaV*sqrt(T))
d2=d1-sigmaV*sqrt(T)
# And finally the probability of default in one year for our company
pnorm(-d2)
sigmaV=0.3
S0=11; # Equity at time 0, i.e. today.
sigmaS=0.3; # Instantaneous volatility of equity
r=0.06; # Risk-free rate on the market
T=1; # Maturity
B=15; # Face value of debt obligation, i.e. liabilities.
# We then need to write down the function we will minimize in order to obtain
# V0, the value of company’s assets today, and sigmaV, assets’ volatility
# To write a function in R, we use the command “function”. Refer to the R intro
# for more details.
Merton_solve=function(parm){
V0=parm[1] #initial value for V0
sigmaV=parm[2] #initial value for sigmaV
# And now, all the quantities we have seen in the slides.
d1=(log(V0/B)+(r+sigmaV^2/2)*T)/(sigmaV*sqrt(T))
d2=d1-sigmaV*sqrt(T)
F=V0*pnorm(d1)-B*exp(-r*T)*pnorm(d2)-S0
G=pnorm(d1)*sigmaV*V0-sigmaS*S0
#  Finally the result of our function:
return(F^2+G^2)
}
# For the minimization step, in order to find V_0 and sigma_V,
# we need to specify two initial values.
# Let us choose V_0=13, and sigmaV=0.5.
# Other plausible values can obviously be chosen.
solutions=optim(c(V0=13,sigmaV=0.5),Merton_solve)
# What are the estimated values?
V0=solutions$par[1]
sigmaV=solutions$par[2]
# Let us compute d1 and d2 explicitly:
d1=(log(V0/B)+(r+sigmaV^2/2)*T)/(sigmaV*sqrt(T))
d2=d1-sigmaV*sqrt(T)
# And finally the probability of default in one year for our company
pnorm(-d2)
pnorm(4.45)
qnorm(0.02)
exp(0.6011247)
1.824169*15
V0=27.36253
d1=(log(V0/B)+(r+sigmaV^2/2)*T)/(sigmaV*sqrt(T))
d2=d1-sigmaV*sqrt(T)
V0=23
d1=(log(V0/B)+(r+sigmaV^2/2)*T)/(sigmaV*sqrt(T))
V0=20
d1=(log(V0/B)+(r+sigmaV^2/2)*T)/(sigmaV*sqrt(T))
V0=18
d1=(log(V0/B)+(r+sigmaV^2/2)*T)/(sigmaV*sqrt(T))
V0=19.5
d1=(log(V0/B)+(r+sigmaV^2/2)*T)/(sigmaV*sqrt(T))
V0=19.2
d1=(log(V0/B)+(r+sigmaV^2/2)*T)/(sigmaV*sqrt(T))
V0=19.3
d1=(log(V0/B)+(r+sigmaV^2/2)*T)/(sigmaV*sqrt(T))
V0=19.4
d1=(log(V0/B)+(r+sigmaV^2/2)*T)/(sigmaV*sqrt(T))
V0=19.5
d1=(log(V0/B)+(r+sigmaV^2/2)*T)/(sigmaV*sqrt(T))
V0=19.45
d1=(log(V0/B)+(r+sigmaV^2/2)*T)/(sigmaV*sqrt(T))
V0=19.41
d1=(log(V0/B)+(r+sigmaV^2/2)*T)/(sigmaV*sqrt(T))
V0=19.37
d1=(log(V0/B)+(r+sigmaV^2/2)*T)/(sigmaV*sqrt(T))
V0=19.29
d1=(log(V0/B)+(r+sigmaV^2/2)*T)/(sigmaV*sqrt(T))
V0=19.07
d1=(log(V0/B)+(r+sigmaV^2/2)*T)/(sigmaV*sqrt(T))
d2=d1-sigmaV*sqrt(T)
pnorm(3)
qnorm(0.9986501)
qnorm(0.02)
exp(0.6011247)
1.824169*15
library("shiny", lib.loc="C:/Users/ntzortzis/Documents/R/win-library/3.1")
runExample("01_hello")
runExample("01_hello")
runExample("shiny01")
runApp("shiny01")
runApp("shiny01")
runApp("shiny01")
runApp("shiny01")
runApp("shiny01")
runApp("shiny01")
runApp("shiny01")
runApp("shiny01")
runApp("shiny01")
runApp("shiny01")
runApp("shiny01")
runApp("shiny01")
runApp("shiny01")
runApp("shiny01")
runApp("shiny01")
runApp("shiny01")
runApp("shiny01")
runApp("shiny01")
